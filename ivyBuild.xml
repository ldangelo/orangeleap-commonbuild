<?xml version="1.0" encoding="UTF-8"?>
<project name="ivyBuild" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="${commonBuild.dir}/commonBuild.properties" />

	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<!-- setup ivy default configuration with some custom info -->
	<property name="ivy.local.default.root" value="${repository.dir}/local"/>
	<property name="ivy.shared.default.root" value="${repository.dir}/shared"/>
	
	

	<target name="init-ivy">
		<available property="ivy.installed" value="true" file="${ivy.jar.file}" type="file" />
	</target>

	<target name="download-ivy" depends="init-ivy" unless="ivy.installed">
		<mkdir dir="${ivy.jar.dir}" />
		<echo message="Installing ivy..." />
		<get src="${central.repo}/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" />
	</target>

	<target name="load-ivy" depends="init-ivy,download-ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
		<ivy:settings file="${commonBuild.dir}/ivysettings.xml"/>
	</target>

    <path id="lib.path.id">
        <fileset dir="${lib.dir}" />
    </path>
    	
    <!-- ================================= 
          target: resolve              
         ================================= -->
    <target name="resolve" depends="load-ivy" description="-> resolve and retrieve dependencies with ivy">
    	<ivy:resolve file="${ivy.file}"/>
    	<ivy:retrieve />

    	<ivy:cachepath pathid="compile.path" conf="compile" />
    	<pathconvert property="compile.lib" refid="compile.path"></pathconvert> 
    	
        <ivy:cachepath pathid="war.path" conf="war" />
    	<pathconvert property="war.lib" refid="war.path"></pathconvert> 
    	
        <ivy:cachepath pathid="test.path" conf="test" />
    	<pathconvert property="test.lib" refid="test.path"></pathconvert> 
    </target>
    
    <!-- ================================= 
          target: report              
         ================================= -->
    <target name="report" depends="resolve" description="-> generates a report of dependencies">
        <ivy:report todir="${build.dir}"/>
    </target>
    
	<target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision">
    	<!-- default module version prefix value -->
		<property name="module.version.prefix" value="${module.version.target}-dev-b" />
		
    	<!-- asks to ivy an available version number -->
		<ivy:info file="${ivy.file}" />
    	<ivy:buildnumber 
    		organisation="${ivy.organisation}" module="${ivy.module}" 
    		revision="${module.version.prefix}" defaultBuildNumber="1" revSep=""/>
	</target>

    <target name="local-version" depends="resolve">
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss"/>
		</tstamp>
        <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
        <property name="version" value="${ivy.new.revision}"/>
    </target>
	
	<target name="version" depends="ivy-new-version">
    	<!-- create version file in classpath for later inclusion in jar -->
        <mkdir dir="${classes.dir}"/>
		<echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />

		<!-- load generated version properties file -->
        <property file="${classes.dir}/${ant.project.name}.properties" />
    </target>

    <!-- ================================= 
          target: build.  Implementing projects expected to override this target and create a war/jar     
         ================================= -->
    <target name="build" description="-> make a jar/war/ear/etc file for this project">
    </target>

    <!-- ================================= 
          target: publish              
         ================================= -->
    <target name="publish" depends="clean-build, build, version" description="-> publish this project in the shared ivy repository">
    	<ivy:publish artifactspattern="${stage.dir}/[artifact].[ext]" 
    			        resolver="shared"
    			    	pubrevision="${version}" 
    			        status="release"
    					publishivy="false"
    					overwrite="true"
    	/>
        <echo message="project ${ant.project.name} released with version ${version}" />
    </target>

    <!-- ================================= 
          target: publish-local              
         ================================= -->
    <target name="publish-local" depends="build, local-version" description="-> publish this project in the local ivy repository">
    	<ivy:publish artifactspattern="${stage.dir}/[artifact].[ext]" 
    			        resolver="local"
    			        pubrevision="${version}"
				        pubdate="${now}"
    			        status="integration"
    					forcedeliver="true"
    	/>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>

	<!-- ================================= 
          target: clean-local              
         ================================= -->
	<target name="clean-local" description="-> cleans the local repository for the current module">
	   <delete dir="${ivy.local.default.root}/${ant.project.name}"/>
	</target>

	<!-- ================================= 
          target: clean-lib              
         ================================= -->
    <target name="clean-lib" description="-> clean the project libraries (lib) directory">
        <delete includeemptydirs="true" dir="${lib.dir}"/>
    </target>

    <!-- ================================= 
          target: clean-build              
         ================================= -->
    <target name="clean-build" description="-> clean the built project file directories">
        <delete includeemptydirs="true" dir="${stage.dir}"/>
        <delete includeemptydirs="true" dir="${test.output.dir}"/>
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" depends="clean-build, clean-lib" description="-> clean the project" />
	
    <!-- ================================= 
          target: uberclean              
         ================================= -->
	<target name="uberclean" depends="clean, load-ivy" description="delete the ivy local repository, ivy cache, and project build">
		<delete dir="${ivy.local.default.root}" />
		<ivy:cleancache />
		<echo>Successfully cleaned the ivy local repository, cache, and project build</echo>
	</target>

	<target name="usage">
		<echo>Common ivy build file for all projects</echo>
		<echo>Implementing projects are expected to define their own "build" target to build an archive file, either a jar, war, ear, etc</echo>
		<echo>"publish" - publish archives to the shared company repository</echo>
		<echo>"publish-local" - publish archives to your local repository</echo>
		<echo>"clean-build" - clean the built project file directories</echo>
		<echo>"clean-lib" - clean the project libraries (lib) directories</echo>
		<echo>"clean-local" - cleans the local repository for the current module</echo>
		<echo>"clean" - calls the "clean-build" and "clean-lib" targets to clean the dependencies and build for the project</echo>
		<echo>"uberclean" - delete the ivy local repository, ivy cache, and project build</echo>
	</target>
</project>
